blueprint:
  name: Awtrix Dynamic Travel Time Display
  description: Display travel time with dynamic icons based on duration
  domain: automation
  input:
    awtrix_device:
      name: Awtrix Device
      selector:
        device:
          integration: mqtt
          manufacturer: Blueforcer
    
    toggle_helper:
      name: Toggle Helper
      selector:
        entity:
          domain: input_boolean

    travel_time_sensor:
      name: Travel Time Sensor
      selector:
        entity:
          domain: sensor

    display_label:
      name: Display Label
      selector:
        text:
      default: "Travel Time"

    high_traffic_icon:
      name: High Traffic Icon ID
      selector:
        text:
      default: "28684"

    medium_traffic_icon:
      name: Medium Traffic Icon ID
      selector:
        text:
      default: "28686"

    normal_traffic_icon:
      name: Normal Traffic Icon ID
      selector:
        text:
      default: "28685"

    scroll:
      name: Scroll the notification?
      selector:
        boolean:
      default: true

    scrollspeed:
      name: Scroll Speed
      selector:
        number:
          min: 0
          max: 100
      default: 100

    duration:
      name: Duration (seconds)
      selector:
        number:
          min: 0
          max: 300
      default: 0

mode: queued
max: 60

trigger:
  - platform: state
    entity_id: !input toggle_helper
    to: "on"
    id: "On"
  - platform: state
    entity_id: !input toggle_helper
    to: "off"
    id: "Off"
  - platform: state
    entity_id: !input travel_time_sensor
    id: "Changes"

variables:
  device_ids: [!input awtrix_device]
  devices: >-
    {% macro get_device(device_id) %}
    {{ states((device_entities(device_id) | select('search','device_topic') | list)[0] | default('unknown')) }}
    {% endmacro %}
    {% set ns = namespace(devices=[]) %} {% for device_id in device_ids %}
    {% set device=get_device(device_id)|replace(' ','')|replace('\n','') %}
    {% set ns.devices = ns.devices + [ device ] %}
    {% endfor %} {{ ns.devices | reject('match','unavailable|unknown') | list }}
  travel_time_entity: !input travel_time_sensor
  app_name: "travel_time_display"
  label: !input display_label
  high_icon: !input high_traffic_icon
  medium_icon: !input medium_traffic_icon
  normal_icon: !input normal_traffic_icon
  display_icon: >-
    {% set time = states(travel_time_entity) | float(0) %}
    {% if time >= 65 %}{{ high_icon }}{% elif time >= 50 %}{{ medium_icon }}{% else %}{{ normal_icon }}{% endif %}
  display_text: >-
    {% set time = states(travel_time_entity) | float(0) %}
    {% set status = ' (High Traffic)' if time >= 65 else (' (Medium Traffic)' if time >= 50 else ' (Normal)') %}
    {{ label }} {{ time | round(0) }}min{{ status }}

action:
  - choose:
      - conditions:
          - condition: trigger
            id: "On"
        sequence:
          - repeat:
              for_each: "{{ devices }}"
              sequence:
                - service: mqtt.publish
                  data:
                    qos: 0
                    retain: false
                    topic: "{{repeat.item}}/custom/{{app_name}}"
                    payload: >-
                      {   
                        "text": "{{ display_text }}",
                        "background": [0, 0, 0],
                        "color": [255, 255, 255],
                        "icon": "{{ display_icon }}",
                        "textCase": 0,
                        "pushIcon": 2,
                        "rainbow": false,
                        "repeat": -1,
                        "duration": {{ duration }},
                        "lifetime": 0,
                        "noScroll": {{ not scroll }},
                        "scrollSpeed": {{ scrollspeed }}
                      }
                - service: mqtt.publish
                  data:
                    qos: 0
                    retain: false
                    topic: "{{repeat.item}}/switch"
                    payload: >-
                      {   
                        "name": "{{app_name}}"
                      }
      - conditions:
          - condition: trigger
            id: "Off"
        sequence:
          - repeat:
              for_each: "{{ devices }}"
              sequence:
                - service: mqtt.publish
                  data:
                    qos: 0
                    retain: false
                    topic: "{{repeat.item}}/custom/{{app_name}}"
                    payload: "{}"
      - conditions:
          - condition: and
            conditions:
              - condition: trigger
                id: "Changes"
              - condition: state
                entity_id: !input toggle_helper
                state: "on"
        sequence:
          - repeat:
              for_each: "{{ devices }}"
              sequence:
                - service: mqtt.publish
                  data:
                    qos: 0
                    retain: false
                    topic: "{{repeat.item}}/custom/{{app_name}}"
                    payload: >-
                      {   
                        "text": "{{ display_text }}",
                        "background": [0, 0, 0],
                        "color": [255, 255, 255],
                        "icon": "{{ display_icon }}",
                        "textCase": 0,
                        "pushIcon": 2,
                        "rainbow": false,
                        "repeat": -1,
                        "duration": {{ duration }},
                        "lifetime": 0,
                        "noScroll": {{ not scroll }},
                        "scrollSpeed": {{ scrollspeed }}
                      }
